/*
 * InCountry
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-02-19T17:40:44Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.incountry.api;

import com.incountry.api.ApiCallback;
import com.incountry.api.ApiClient;
import com.incountry.api.ApiException;
import com.incountry.api.ApiResponse;
import com.incountry.api.Configuration;
import com.incountry.api.Pair;
import com.incountry.api.ProgressRequestBody;
import com.incountry.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.incountry.model.Data;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletePost
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePostCall(String config, String country, String rowid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (config != null)
        localVarHeaderParams.put("config", apiClient.parameterToString(config));
        if (country != null)
        localVarHeaderParams.put("country", apiClient.parameterToString(country));
        if (rowid != null)
        localVarHeaderParams.put("rowid", apiClient.parameterToString(rowid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePostValidateBeforeCall(String config, String country, String rowid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling deletePost(Async)");
        }
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling deletePost(Async)");
        }
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling deletePost(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePostCall(config, country, rowid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @return Data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Data deletePost(String config, String country, String rowid) throws ApiException {
        ApiResponse<Data> resp = deletePostWithHttpInfo(config, country, rowid);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @return ApiResponse&lt;Data&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Data> deletePostWithHttpInfo(String config, String country, String rowid) throws ApiException {
        com.squareup.okhttp.Call call = deletePostValidateBeforeCall(config, country, rowid, null, null);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePostAsync(String config, String country, String rowid, final ApiCallback<Data> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePostValidateBeforeCall(config, country, rowid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for keylookupPost
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylookupPostCall(String config, String country, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/keylookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (config != null)
        localVarHeaderParams.put("config", apiClient.parameterToString(config));
        if (country != null)
        localVarHeaderParams.put("country", apiClient.parameterToString(country));
        if (key1 != null)
        localVarHeaderParams.put("key1", apiClient.parameterToString(key1));
        if (key2 != null)
        localVarHeaderParams.put("key2", apiClient.parameterToString(key2));
        if (key3 != null)
        localVarHeaderParams.put("key3", apiClient.parameterToString(key3));
        if (key4 != null)
        localVarHeaderParams.put("key4", apiClient.parameterToString(key4));
        if (key5 != null)
        localVarHeaderParams.put("key5", apiClient.parameterToString(key5));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylookupPostValidateBeforeCall(String config, String country, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling keylookupPost(Async)");
        }
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling keylookupPost(Async)");
        }
        
        com.squareup.okhttp.Call call = keylookupPostCall(config, country, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return Data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Data keylookupPost(String config, String country, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        ApiResponse<Data> resp = keylookupPostWithHttpInfo(config, country, key1, key2, key3, key4, key5);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return ApiResponse&lt;Data&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Data> keylookupPostWithHttpInfo(String config, String country, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        com.squareup.okhttp.Call call = keylookupPostValidateBeforeCall(config, country, key1, key2, key3, key4, key5, null, null);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylookupPostAsync(String config, String country, String key1, String key2, String key3, String key4, String key5, final ApiCallback<Data> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylookupPostValidateBeforeCall(config, country, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lookupPost
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lookupPostCall(String config, String country, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (config != null)
        localVarHeaderParams.put("config", apiClient.parameterToString(config));
        if (country != null)
        localVarHeaderParams.put("country", apiClient.parameterToString(country));
        if (key1 != null)
        localVarHeaderParams.put("key1", apiClient.parameterToString(key1));
        if (key2 != null)
        localVarHeaderParams.put("key2", apiClient.parameterToString(key2));
        if (key3 != null)
        localVarHeaderParams.put("key3", apiClient.parameterToString(key3));
        if (key4 != null)
        localVarHeaderParams.put("key4", apiClient.parameterToString(key4));
        if (key5 != null)
        localVarHeaderParams.put("key5", apiClient.parameterToString(key5));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lookupPostValidateBeforeCall(String config, String country, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling lookupPost(Async)");
        }
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling lookupPost(Async)");
        }
        
        com.squareup.okhttp.Call call = lookupPostCall(config, country, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return Data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Data lookupPost(String config, String country, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        ApiResponse<Data> resp = lookupPostWithHttpInfo(config, country, key1, key2, key3, key4, key5);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return ApiResponse&lt;Data&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Data> lookupPostWithHttpInfo(String config, String country, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        com.squareup.okhttp.Call call = lookupPostValidateBeforeCall(config, country, key1, key2, key3, key4, key5, null, null);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param config  (required)
     * @param country  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookupPostAsync(String config, String country, String key1, String key2, String key3, String key4, String key5, final ApiCallback<Data> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookupPostValidateBeforeCall(config, country, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPost
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPostCall(String config, String country, String rowid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (config != null)
        localVarHeaderParams.put("config", apiClient.parameterToString(config));
        if (country != null)
        localVarHeaderParams.put("country", apiClient.parameterToString(country));
        if (rowid != null)
        localVarHeaderParams.put("rowid", apiClient.parameterToString(rowid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPostValidateBeforeCall(String config, String country, String rowid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling readPost(Async)");
        }
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling readPost(Async)");
        }
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling readPost(Async)");
        }
        
        com.squareup.okhttp.Call call = readPostCall(config, country, rowid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @return Data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Data readPost(String config, String country, String rowid) throws ApiException {
        ApiResponse<Data> resp = readPostWithHttpInfo(config, country, rowid);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @return ApiResponse&lt;Data&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Data> readPostWithHttpInfo(String config, String country, String rowid) throws ApiException {
        com.squareup.okhttp.Call call = readPostValidateBeforeCall(config, country, rowid, null, null);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPostAsync(String config, String country, String rowid, final ApiCallback<Data> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPostValidateBeforeCall(config, country, rowid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for writePost
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param blob  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call writePostCall(String config, String country, String rowid, String blob, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/write";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (config != null)
        localVarHeaderParams.put("config", apiClient.parameterToString(config));
        if (country != null)
        localVarHeaderParams.put("country", apiClient.parameterToString(country));
        if (rowid != null)
        localVarHeaderParams.put("rowid", apiClient.parameterToString(rowid));
        if (blob != null)
        localVarHeaderParams.put("blob", apiClient.parameterToString(blob));
        if (key1 != null)
        localVarHeaderParams.put("key1", apiClient.parameterToString(key1));
        if (key2 != null)
        localVarHeaderParams.put("key2", apiClient.parameterToString(key2));
        if (key3 != null)
        localVarHeaderParams.put("key3", apiClient.parameterToString(key3));
        if (key4 != null)
        localVarHeaderParams.put("key4", apiClient.parameterToString(key4));
        if (key5 != null)
        localVarHeaderParams.put("key5", apiClient.parameterToString(key5));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call writePostValidateBeforeCall(String config, String country, String rowid, String blob, String key1, String key2, String key3, String key4, String key5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling writePost(Async)");
        }
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling writePost(Async)");
        }
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling writePost(Async)");
        }
        // verify the required parameter 'blob' is set
        if (blob == null) {
            throw new ApiException("Missing the required parameter 'blob' when calling writePost(Async)");
        }
        
        com.squareup.okhttp.Call call = writePostCall(config, country, rowid, blob, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param blob  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return Data
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Data writePost(String config, String country, String rowid, String blob, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        ApiResponse<Data> resp = writePostWithHttpInfo(config, country, rowid, blob, key1, key2, key3, key4, key5);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param blob  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @return ApiResponse&lt;Data&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Data> writePostWithHttpInfo(String config, String country, String rowid, String blob, String key1, String key2, String key3, String key4, String key5) throws ApiException {
        com.squareup.okhttp.Call call = writePostValidateBeforeCall(config, country, rowid, blob, key1, key2, key3, key4, key5, null, null);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param config  (required)
     * @param country  (required)
     * @param rowid  (required)
     * @param blob  (required)
     * @param key1  (optional)
     * @param key2  (optional)
     * @param key3  (optional)
     * @param key4  (optional)
     * @param key5  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call writePostAsync(String config, String country, String rowid, String blob, String key1, String key2, String key3, String key4, String key5, final ApiCallback<Data> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = writePostValidateBeforeCall(config, country, rowid, blob, key1, key2, key3, key4, key5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Data>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
